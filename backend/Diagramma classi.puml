@startuml
skinparam classAttributeIconSize 0

package "models.pkb" {
    class Pattern {
        -pattern_name: str
        -strategies: str
        -description: str
        -context: str
        -mvc_placement: str
        -iso_phase: str
        -gdpr_compliance: str
        -privacy_by_design: str
        -owasp_categories: str
        -cwe_top_25: str
        -examples: str

        +Pattern(id: str, pattern_name: str, strategies: str, description: str, context: str, mvc_placement: str, iso_phase: str, gdpr_compliance: str, privacy_by_design: str, owasp_categories: str, cwe_top_25: str, examples: str)
        +getPatternByPrivacyByDesign(privacy_by_design: str): list
        +getAllPatterns(): list
    }

    class PrivacyByDesign {
        -title: str
        -description: str

        +PrivacyByDesign(id: str, title: str, description: str)
        +getPrivacyByDesign(): list
    }
}

package "models.message_reporting" {
    abstract BaseMessage {
        -oggetto: str
        -messaggio: str
        -data_ora: data_ora
        -ip_pubblico: str

        +BaseMessage(oggetto: str, messaggio: str)
        +to_json(): dict
        +validate(oggetto: str, messaggio: str): bool
    }

    class Feedback {
        +insertFeedback(): tuple
    }

    class Segnalazione {
        -mail: str

        +Segnalazione(oggetto: str, messaggio: str, mail: str)
        +insertSegnalazione(mail: str): tuple
        +getAllSegnalazioni(): list
        +statusSegnalazione(mail: str): tuple
        +to_json(): dict
        +getSegnalazioniAccettate(): list
        +storicoUtente(email: str): list
    }
}

package "models.attors" {
    enum Ruolo {
        +UTENTE: str
        +CISO: str
        +AMMINISTRATORE_DI_SISTEMA: str
    }

    abstract Utente {
        -nome: str
        -cognome: str
        -email: str
        -password: str
        -ruolo: Ruolo
        -genere: str

        +Utente(nome: str, cognome: str, email: str, password: str, ruolo: Ruolo)
        +to_json(): dict
        +valida_email(email: str): bool
        +valida_password(password: str): bool
        +valida_nome_cognome(nome_cognome: str): bool
        +registrati(): tuple
        +login(): tuple
        +logout(): tuple
        +getNomeCognomeRuoloGenere(mail: str): tuple
        +carica_foto(mail: str): tuple
        +refresh_expiring_jwts(response: obj): obj
    }

    class Ciso {
        +carica_licenza(mail: str): tuple
        +recupera_licenza(mail: str) file
    }

    class AmministratoreDiSistema {
        +visualizza_utenti(mail: str): tuple
        +elimina_utente(mail_amministrator: str, mail_utente: str): tuple
    }
}

package "controllers" {

    class amministraore_di_sistema_controller <<(F, #FF7700) >> {
        +all_utenti: tuple
        +elimina_utente(mail_utente): tuple
    }

    class ciso_controller << (F, #FF7700) >>{
        +carica_licenza: tuple
        +recupera_licenza: obj
    }
    class feedback_controller << (F, #FF7700) >>{
        +add_feedback: tuple
    }
    class pattern_controller << (F, #FF7700) >>{
        +privacyByDesign: tuple
        +getAllPatterns: tuple
    }
    class privacy_by_design_controller << (F, #FF7700) >>{
        +get_privacy_by_design: tuple
    }
    class segnalazione_controller << (F, #FF7700) >>{
        +add_segnalazione: tuple
        +get_all_segnalazione: tuple
        +get_all_segnalazione_accettate: tuple
        + get_storico_utente
    }
    class utente_controller << (F, #FF7700) >>{
        +register_user: tuple
        +login_user: tuple
        +get_user_profile: str
        +after_request: tuple
        +logout_user: tuple
        +carica_foto: obj
    }
}

package "config"{
    class config <<(F, #FF7700) >>{
        +create_app: obj
    }

    class db <<(F, #FF7700) >>{
        +conn_db: obj
    }
}

class app <<(F, #FF7700) >>

Utente ..> Ruolo : "<<use>>"
Ciso ..> Utente : "<<extends>>"
AmministratoreDiSistema ..> Utente : "<<extends>>"
Feedback ..> BaseMessage : "<<extends>>"
Segnalazione ..> BaseMessage : "<<extends>>"


amministraore_di_sistema_controller ..> AmministratoreDiSistema : <<use>>
AmministratoreDiSistema ..> db : <<use>>

ciso_controller ..> Ciso : <<use>>
Ciso ..> db : <<use>>

feedback_controller ..> Feedback : <<use>>
Feedback ..> db : <<use>>

pattern_controller ..> Pattern : <<use>>
Pattern ..> db : <<use>>

privacy_by_design_controller ..> PrivacyByDesign : <<use>>
PrivacyByDesign ..> db : <use>>

segnalazione_controller ..> Segnalazione : <<use>>
Segnalazione ..> db : <<use>>
Segnalazione ..> Utente : <<use>>

utente_controller ..> Utente : <<use>>
Utente ..> db : <<use>>

app ..> config.config : <<use>>
app ..> "controllers": <<use>>

@enduml